{"version":3,"sources":["components/FormUserDetails.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["FormUserDetails","continue","e","preventDefault","props","nextStep","this","values","handleChange","Fragment","title","floatingLabelText","onChange","defaultValue","firstName","lastName","email","label","primary","style","styles","button","onClick","Component","margin","UserForm","state","step","occupation","city","bio","setState","prevStep","input","target","value","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAMaA,EAAb,4MACEC,SAAW,SAACC,GACVA,EAAEC,iBACF,EAAKC,MAAMC,YAHf,uDAMY,IAAD,EAC0BC,KAAKF,MAA9BG,EADD,EACCA,OAAQC,EADT,EACSA,aAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAQC,MAAM,uBACd,kBAAC,IAAD,CACEC,kBAAkB,aAClBC,SAAUJ,EAAa,aACvBK,aAAcN,EAAOO,YAEvB,6BACA,kBAAC,IAAD,CACEH,kBAAkB,YAClBC,SAAUJ,EAAa,YACvBK,aAAcN,EAAOQ,WAEvB,6BACA,kBAAC,IAAD,CACEJ,kBAAkB,QAClBC,SAAUJ,EAAa,SACvBK,aAAcN,EAAOS,QAEvB,6BACA,kBAAC,IAAD,CACEC,MAAM,WACNC,SAAS,EACTC,MAAOC,EAAOC,OACdC,QAAShB,KAAKL,iBAlC1B,GAAqCsB,aA0C/BH,EAAS,CACbC,OAAQ,CACNG,OAAQ,KAIGxB,ICOAyB,EA1Df,4MACEC,MAAQ,CACNC,KAAM,EACNb,UAAW,GACXC,SAAU,GACVC,MAAO,GACPY,WAAY,GACZC,KAAM,GACNC,IAAK,IART,EAYEzB,SAAW,WAAO,IACRsB,EAAS,EAAKD,MAAdC,KACR,EAAKI,SAAS,CACZJ,KAAMA,EAAO,KAfnB,EAoBEK,SAAW,WAAO,IACRL,EAAS,EAAKD,MAAdC,KACR,EAAKI,SAAS,CACZJ,KAAMA,EAAO,KAvBnB,EA4BEnB,aAAe,SAACyB,GAAD,OAAW,SAAC/B,GACzB,EAAK6B,SAAL,eAAiBE,EAAQ/B,EAAEgC,OAAOC,UA7BtC,uDAgCY,IACAR,EAASrB,KAAKoB,MAAdC,KADD,EAEuDrB,KAAKoB,MAC7DnB,EAAS,CAAEO,UAHV,EAECA,UACoBC,SAHrB,EAEYA,SACmBC,MAH/B,EAEsBA,MACgBY,WAHtC,EAE6BA,WACqBC,KAHlD,EAEyCA,KACeC,IAHxD,EAE+CA,KAGtD,OAAQH,GACN,KAAK,EACH,OACE,kBAAC,EAAD,CACEtB,SAAUC,KAAKD,SACfG,aAAcF,KAAKE,aACnBD,OAAQA,IAGd,KAAK,EACH,OAAO,mDACT,KAAK,EACH,OAAO,uCACT,KAAK,EACH,OAAO,uCAGX,OAAO,kCAtDX,GAA8BgB,aCSfa,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef3b40ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport AppBar from \"material-ui/AppBar\";\nimport TextField from \"material-ui/TextField\";\nimport RaisedButton from \"material-ui/RaisedButton\";\n\nexport class FormUserDetails extends Component {\n  continue = (e) => {\n    e.preventDefault();\n    this.props.nextStep();\n  };\n\n  render() {\n    const { values, handleChange } = this.props;\n    return (\n      <MuiThemeProvider>\n        <React.Fragment>\n          <AppBar title=\"Enter User Details\" />\n          <TextField\n            floatingLabelText=\"First name\"\n            onChange={handleChange(\"firstName\")}\n            defaultValue={values.firstName}\n          />\n          <br />\n          <TextField\n            floatingLabelText=\"Last name\"\n            onChange={handleChange(\"lastName\")}\n            defaultValue={values.lastName}\n          />\n          <br />\n          <TextField\n            floatingLabelText=\"Email\"\n            onChange={handleChange(\"email\")}\n            defaultValue={values.email}\n          />\n          <br />\n          <RaisedButton\n            label=\"continue\"\n            primary={true}\n            style={styles.button}\n            onClick={this.continue}\n          />\n        </React.Fragment>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nconst styles = {\n  button: {\n    margin: 15,\n  },\n};\n\nexport default FormUserDetails;\n","import React, { Component } from \"react\";\nimport FormUserDetails from \"./FormUserDetails\";\n\nexport class UserForm extends Component {\n  state = {\n    step: 1,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    occupation: \"\",\n    city: \"\",\n    bio: \"\",\n  };\n\n  // Proceed to next step\n  nextStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step + 1,\n    });\n  };\n\n  // Go back to prev step\n  prevStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step - 1,\n    });\n  };\n\n  // Handle fields change\n  handleChange = (input) => (e) => {\n    this.setState({ [input]: e.target.value });\n  };\n\n  render() {\n    const { step } = this.state;\n    const { firstName, lastName, email, occupation, city, bio } = this.state;\n    const values = { firstName, lastName, email, occupation, city, bio };\n\n    switch (step) {\n      case 1:\n        return (\n          <FormUserDetails\n            nextStep={this.nextStep}\n            handleChange={this.handleChange}\n            values={values}\n          />\n        );\n      case 2:\n        return <h1>FormPersonalDetails</h1>;\n      case 3:\n        return <h1>Confirm</h1>;\n      case 4:\n        return <h1>Success</h1>;\n    }\n\n    return <div></div>;\n  }\n}\n\nexport default UserForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport UserForm from \"./components/UserForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}